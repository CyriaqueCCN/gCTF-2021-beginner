#!/usr/bin/env python3

# semantic changes :
# $ means 0x (hexa), & means 0o (octal)
# RolQWord means shift left with overflow

a = 0x0100101000011110
b = 0x2002220020022220
c = 0x4444040044044400 
d = 0x8880008080000880

# a 0000000100000000000100000001000000000000000000010001000100010000
# b 0010000000000010001000100000000000100000000000100010001000100000
# c 0100010001000100000001000000000001000100000001000100010000000000
# d 1000100010000000000000001000000010000000000000000000100010000000

#xa = x & 0b0001000100010001000100010001000100010001000100010001000100010001
#xb = x & 0b0010001000100010001000100010001000100010001000100010001000100010
#xc = x & 0b0100010001000100010001000100010001000100010001000100010001000100
#xd = x & 0b1000100010001000100010001000100010001000100010001000100010001000

# we know from the lines above that a, b, c and d contain all bits of x
x = a | b | c | d

# we reverse the rolqword(x, 10) part
x = (x >> 10) | ((x & 0b1111111111) << 54)

# we reverse the xor, as b ^ a ^ b = a
x = x ^ 0o1275437152437512431354

# print a digit every 4 bits
print("CTF{", end="")
while x != 0:
    print(x & 0b1111, end="")
    x = x >> 4
print("}")
